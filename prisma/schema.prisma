// Datasource configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator configuration
generator client {
  provider = "prisma-client-js"
}

// Enums
enum userRole {
  USER
  ADMIN
}

// Models
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Photo {
  id           String   @id @default(cuid())
  title        String
  description  String?
  imageUrl     String
  photographer String
  hashtags     String[]
  userId       String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          userRole     @default(USER)
  accounts      Account[]
  photos        Photo[]
  phonePrefixId String?
  phonePrefix   PhonePrefix? @relation(fields: [phonePrefixId], references: [id])
  genderId      String?
  gender        Genders?     @relation(fields: [genderId], references: [id])
  birthdate     DateTime?
  country       String?
  city          String?
  zipCode       String?
  address       String?
  occupation    String?
  interests     String?
  slogan        String?
  portfolioUrl  String?
  followers     Int         @default(0)
  following     Int         @default(0)
  posts         Int         @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PhonePrefix {
  id      String @id @default(cuid())
  prefix  String @unique
  country String
  users   User[]

  @@unique([prefix, country])
}

model Genders {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}
